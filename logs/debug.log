2023-09-12T14:48:30.113+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:48:30.113117]++++++++++++++++++++++++++++
2023-09-12T14:48:30.114+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:48:32.357+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\error_utils.py:85' - __exit__()]
Traceback (most recent call last):
  File "E:\works\git_atomic_commit\argparse_utils.py", line 54, in __init__
    pydantic_type = prop.pop("type")
                    ^^^^^^^^^^^^^^^^
KeyError: 'type'

2023-09-12T14:48:32.773+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "E:\works\git_atomic_commit\atomic_commit.py", line 42, in <module>
    config = getConfig(AtomicCommitConfig)
             │         └ <class '__main__.AtomicCommitConfig'>
             └ <function getConfig at 0x00000207E8EC2A20>
  File "E:\works\git_atomic_commit\config_utils.py", line 343, in getConfig
    config: T = envConfigClass.load()
            │   └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
            └ ~T
  File "E:\works\git_atomic_commit\config_utils.py", line 254, in load
    params = cls.manager_cls.load()
             └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 225, in load
    argumentEnvInst = cls.argumentEnv.load()
                      └ <class 'config_utils.getEnvManagerClass.<locals>.env_manager_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 100, in load
    trans = ArgumentTransformer(cls)
            │                   └ <class 'config_utils.extendEnvClass.<locals>.extended_env_class'>
            └ <class 'argparse_utils.ArgumentTransformer'>
  File "E:\works\git_atomic_commit\argparse_utils.py", line 54, in __init__
    pydantic_type = prop.pop("type")
                    └ {'title': 'Backup mode configuration', 'default': 'last_time_only', 'allOf': [{'$ref': '#/definitions/BackupMode'}]}
KeyError: 'type'

2023-09-12T14:49:04.816+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:49:04.816300]++++++++++++++++++++++++++++
2023-09-12T14:49:04.817+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:49:05.072+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T14:49:05.074+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:05.074+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T14:49:05.074+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:05.075+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T14:49:05.075+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:29.871+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:49:29.871455]++++++++++++++++++++++++++++
2023-09-12T14:49:29.872+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:49:30.126+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T14:49:30.127+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:30.127+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T14:49:30.128+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:30.128+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T14:49:30.128+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:32.475+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:49:32.475875]++++++++++++++++++++++++++++
2023-09-12T14:49:32.477+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:49:32.704+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T14:49:32.705+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:32.706+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T14:49:32.706+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:32.706+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:79' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T14:49:32.707+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:85' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:49:40.477+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:49:40.477333]++++++++++++++++++++++++++++
2023-09-12T14:49:40.478+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:49:58.531+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\error_utils.py:85' - __exit__()]
Traceback (most recent call last):
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    pytype = pydantic_type_to_pytype.get(pydantic_type, None)
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    pytype = pydantic_type_to_pytype.get(pydantic_type, None)
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
                      ^^^^^^^^^^^^^
bdb.BdbQuit

2023-09-12T14:49:58.627+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "E:\works\git_atomic_commit\atomic_commit.py", line 42, in <module>
    config = getConfig(AtomicCommitConfig)
             │         └ <class '__main__.AtomicCommitConfig'>
             └ <function getConfig at 0x000002247F73A7A0>
  File "E:\works\git_atomic_commit\config_utils.py", line 343, in getConfig
    config: T = envConfigClass.load()
            │   └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
            └ ~T
  File "E:\works\git_atomic_commit\config_utils.py", line 254, in load
    params = cls.manager_cls.load()
             └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 225, in load
    argumentEnvInst = cls.argumentEnv.load()
                      └ <class 'config_utils.getEnvManagerClass.<locals>.env_manager_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 100, in load
    trans = ArgumentTransformer(cls)
            │                   └ <class 'config_utils.extendEnvClass.<locals>.extended_env_class'>
            └ <class 'argparse_utils.ArgumentTransformer'>
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    pytype = pydantic_type_to_pytype.get(pydantic_type, None)
             │                           └ 'unknown'
             └ {'integer': <class 'int'>, 'number': <class 'float'>, 'string': <class 'str'>, 'boolean': <class 'bool'>}
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    pytype = pydantic_type_to_pytype.get(pydantic_type, None)
             │                           └ 'unknown'
             └ {'integer': <class 'int'>, 'number': <class 'float'>, 'string': <class 'str'>, 'boolean': <class 'bool'>}
  File "C:\Python311\Lib\bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           │                  └ <frame at 0x000002247F558970, file 'E:\\works\\git_atomic_commit\\argparse_utils.py', line 57, code __init__>
           └ <pdb.Pdb object at 0x000002247F74C490>
  File "C:\Python311\Lib\bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
       │                    └ <class 'bdb.BdbQuit'>
       └ <pdb.Pdb object at 0x000002247F74C490>
bdb.BdbQuit

2023-09-12T14:50:06.624+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:50:06.624976]++++++++++++++++++++++++++++
2023-09-12T14:50:06.626+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:51:47.470+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\error_utils.py:85' - __exit__()]
Traceback (most recent call last):
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    # annotated_type = self.dataModel.__annotations__.get(field)  # .__name__?
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    # annotated_type = self.dataModel.__annotations__.get(field)  # .__name__?
             ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
                      ^^^^^^^^^^^^^
bdb.BdbQuit

2023-09-12T14:51:47.570+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "E:\works\git_atomic_commit\atomic_commit.py", line 42, in <module>
    config = getConfig(AtomicCommitConfig)
             │         └ <class '__main__.AtomicCommitConfig'>
             └ <function getConfig at 0x00000262F516A660>
  File "E:\works\git_atomic_commit\config_utils.py", line 343, in getConfig
    config: T = envConfigClass.load()
            │   └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
            └ ~T
  File "E:\works\git_atomic_commit\config_utils.py", line 254, in load
    params = cls.manager_cls.load()
             └ <class 'config_utils.getEnvConfigClass.<locals>.env_config_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 225, in load
    argumentEnvInst = cls.argumentEnv.load()
                      └ <class 'config_utils.getEnvManagerClass.<locals>.env_manager_class'>
  File "E:\works\git_atomic_commit\config_utils.py", line 100, in load
    trans = ArgumentTransformer(cls)
            │                   └ <class 'config_utils.extendEnvClass.<locals>.extended_env_class'>
            └ <class 'argparse_utils.ArgumentTransformer'>
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    # annotated_type = self.dataModel.__annotations__.get(field)  # .__name__?
  File "E:\works\git_atomic_commit\argparse_utils.py", line 57, in __init__
    # annotated_type = self.dataModel.__annotations__.get(field)  # .__name__?
  File "C:\Python311\Lib\bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           │                  └ <frame at 0x00000262F4F98970, file 'E:\\works\\git_atomic_commit\\argparse_utils.py', line 57, code __init__>
           └ <pdb.Pdb object at 0x00000262F517FF10>
  File "C:\Python311\Lib\bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
       │                    └ <class 'bdb.BdbQuit'>
       └ <pdb.Pdb object at 0x00000262F517FF10>
bdb.BdbQuit

2023-09-12T14:51:56.371+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:51:56.371340]++++++++++++++++++++++++++++
2023-09-12T14:51:56.372+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:51:56.608+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T14:51:56.609+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:51:56.609+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T14:51:56.609+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:51:56.610+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T14:51:56.610+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:52:43.135+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T14:52:43.135734]++++++++++++++++++++++++++++
2023-09-12T14:52:43.136+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T14:52:43.354+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T14:52:43.356+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:52:43.356+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T14:52:43.356+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T14:52:43.357+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T14:52:43.357+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T15:06:47.964+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:06:47.964187]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:06:47.964+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:07:09.773+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:07:09.773038]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:07:09.773+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:09:27.765+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:09:27.765672]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:09:27.776+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:10:08.985+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:10:08.985811]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:10:08.985+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:13:25.286+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:13:25.286497]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:13:25.286+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:14:20.877+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:236' - <module>()]
++++++++++++++++++++++++++++++++++++++++++++[START LOGGING AT: 2023-09-12T15:14:20.876038]+++++++++++++++++++++++++++++++++++++++++++
2023-09-12T15:14:20.877+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\log_utils.py:276' - <module>()]
logging started at directory: 

E:\works\git_atomic_commit
2023-09-12T15:14:21.091+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_MODE' does not have translation. skipping...
2023-09-12T15:14:21.091+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T15:14:21.092+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-12T15:14:21.092+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-12T15:14:21.092+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-12T15:14:21.092+08:00 <microgrid:DEBUG> ['E:\works\git_atomic_commit\argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:16:22.617+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:16:22.617123]++++++++++++++++++++
2023-09-13T01:16:22.617+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:16:22.952+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:16:22.952+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:16:22.952+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:16:22.952+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:16:22.953+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:16:23.205+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "atomic_commit.py", line 496, in <module>
    success = atomic_commit()
              └ <function atomic_commit at 0x104224550>
  File "atomic_commit.py", line 464, in atomic_commit
    can_commit = atomic_commit_common()
                 └ <function atomic_commit_common at 0x1042245e0>
  File "atomic_commit.py", line 486, in atomic_commit_common
    if rollback():
  File "atomic_commit.py", line 417, in rollback
    assert (
AssertionError: Running rollback command failed with exit code 768

2023-09-13T01:19:22.647+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:19:22.647756]++++++++++++++++++++
2023-09-13T01:19:22.648+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:19:22.986+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:19:22.986+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:19:22.986+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:19:22.986+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:19:22.987+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:19:23.004+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:19:23.211+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "atomic_commit.py", line 498, in <module>
    success = atomic_commit()
              └ <function atomic_commit at 0x116fda670>
  File "atomic_commit.py", line 466, in atomic_commit
    can_commit = atomic_commit_common()
                 └ <function atomic_commit_common at 0x116fda700>
  File "atomic_commit.py", line 488, in atomic_commit_common
    if rollback():
  File "atomic_commit.py", line 419, in rollback
    assert (
AssertionError: Running rollback command failed with exit code 768

2023-09-13T01:19:50.914+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:19:50.914823]++++++++++++++++++++
2023-09-13T01:19:50.914+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:19:51.254+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:19:51.254+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:19:51.254+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:19:51.255+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:19:51.256+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:19:51.281+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:19:51.476+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "atomic_commit.py", line 498, in <module>
    success = atomic_commit()
              └ <function atomic_commit at 0x115467670>
  File "atomic_commit.py", line 466, in atomic_commit
    can_commit = atomic_commit_common()
                 └ <function atomic_commit_common at 0x115467700>
  File "atomic_commit.py", line 488, in atomic_commit_common
    if rollback():
  File "atomic_commit.py", line 419, in rollback
    assert (
AssertionError: Running rollback command failed with exit code 768

2023-09-13T01:21:21.339+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:21:21.339428]++++++++++++++++++++
2023-09-13T01:21:21.339+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:21:21.681+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:21:21.681+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:21:21.681+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:21:21.681+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:21:21.682+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:21:21.712+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:21:21.729+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:256' - logger_excepthook()]
<TOPLEVEL EXCEPTION>

Traceback (most recent call last):
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/shutil.py", line 791, in move
    os.rename(src, real_dst)
    │         │    └ '.git_backup/.inprogress'
    │         └ '.git_backup/.git'
    └ <module 'os' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/os.py'>
FileNotFoundError: [Errno 2] No such file or directory: '.git_backup/.git' -> '.git_backup/.inprogress'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "atomic_commit.py", line 498, in <module>
    success = atomic_commit()
              └ <function atomic_commit at 0x103c6e670>
  File "atomic_commit.py", line 466, in atomic_commit
    can_commit = atomic_commit_common()
                 └ <function atomic_commit_common at 0x103c6e700>
  File "atomic_commit.py", line 491, in atomic_commit_common
    if atomic_backup():
  File "atomic_commit.py", line 387, in atomic_backup
    success = backup()
    │         └ <function backup at 0x103c6e310>
    └ False
  File "atomic_commit.py", line 304, in backup
    shutil.move(BACKUP_GIT_DIR, INPROGRESS_DIR)
    │           │               └ '.git_backup/.inprogress'
    │           └ '.git_backup/.git'
    └ <module 'shutil' from '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/shuti...
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/shutil.py", line 811, in move
    copy_function(src, real_dst)
    │             │    └ '.git_backup/.inprogress'
    │             └ '.git_backup/.git'
    └ <function copy2 at 0x1013cb5e0>
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/shutil.py", line 435, in copy2
    copyfile(src, dst, follow_symlinks=follow_symlinks)
    │        │    │                    └ True
    │        │    └ '.git_backup/.inprogress'
    │        └ '.git_backup/.git'
    └ <function copyfile at 0x1013cb310>
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/shutil.py", line 264, in copyfile
    with open(src, 'rb') as fsrc, open(dst, 'wb') as fdst:
FileNotFoundError: [Errno 2] No such file or directory: '.git_backup/.git'

2023-09-13T01:26:13.722+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:26:13.722500]++++++++++++++++++++
2023-09-13T01:26:13.722+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:26:14.040+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:26:14.041+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:26:14.041+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:26:14.041+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:26:14.042+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:26:14.074+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:26:16.130+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:26:48.846+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:26:48.846633]++++++++++++++++++++
2023-09-13T01:26:48.847+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:26:49.143+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:26:49.143+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:26:49.143+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:26:49.143+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:26:49.147+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:26:49.177+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:26:57.153+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
2023-09-13T01:27:01.009+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:236' - <module>()]
+++++++++++++++++++++[START LOGGING AT: 2023-09-13T01:27:01.009862]++++++++++++++++++++
2023-09-13T01:27:01.010+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/log_utils.py:276' - <module>()]
logging started at directory: 

/Volumes/Toshiba XG3/works/git_atomic_commit
2023-09-13T01:27:01.195+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'BACKUP_UPDATE_CHECK_MODE' does not have translation. skipping...
2023-09-13T01:27:01.195+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:27:01.195+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:77' - __init__()]
property key 'allOf' of field 'GIT_HEAD_HASH_ACQUISITION_MODE' does not have translation. skipping...
2023-09-13T01:27:01.195+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/argparse_utils.py:83' - __init__()]
pydantic type 'unknown' does not have corresponding python type. falling back to str
2023-09-13T01:27:01.195+08:00 <microgrid:DEBUG> ['/Volumes/Toshiba XG3/works/git_atomic_commit/config_utils.py:256' - load()]
Loaded environment variables:

BACKUP_UPDATE_CHECK_MODE:	<BackupUpdateCheckMode.commit_and_backup_flag_metadata: 'commit_and_backup_flag_metadata'>

GIT_HEAD_HASH_ACQUISITION_MODE:	<GitHeadHashAcquisitionMode.rev_parse: 'rev_parse'>
2023-09-13T01:27:01.230+08:00 <microgrid:DEBUG> ['atomic_commit.py:232' - git_fsck()]
git fsck success
