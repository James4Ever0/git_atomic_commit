{
    "/README.md": "Git Repository Recovery and Prevention Tool",
    "/README.md:2-25": "Git Repository Recovery and Prevention Tool",
    "/README.md:26-46": "Git & Rclone Backup Manager Options",
    "/README.md:47-78": "Git Atomic Backup with Python and Rclone",
    "/argparse_utils.py": "\"ArgumentTransformer & External Function Manager\"\n\nThis title accurately summarizes the two main classes mentioned in the content and their primary functions. It is concise, meaningful, and easily identifiable with the given path",
    "/argparse_utils.py:1-43": "Data Model to Argparse Transformer",
    "/argparse_utils.py:105-133": "Command Line Argument Parsing Decorators",
    "/argparse_utils.py:134-157": "Run External Command Decorator",
    "/argparse_utils.py:158-158": "Missing Code Snippet",
    "/argparse_utils.py:44-63": "Error-handling Argument Parser Utilities",
    "/argparse_utils.py:64-82": "Append Formatted Help to List",
    "/argparse_utils.py:83-104": "Extended argparse with Line Breaks and Duplication Warning",
    "/atomic_commit.py": "Atomic Commit Manager",
    "/atomic_commit.py:1-26": "Atomic Commit Enhancements",
    "/atomic_commit.py:100-133": "Git Atomic Commit and Safe Directory Handling",
    "/atomic_commit.py:134-161": "Atomic Commit Detection",
    "/atomic_commit.py:162-193": "Git Status Class Definition",
    "/atomic_commit.py:195-230": "Repo Status Checker",
    "/atomic_commit.py:232-260": "AtomicCommitConfig Definition",
    "/atomic_commit.py:261-287": "Atomic Commit Config Variables",
    "/atomic_commit.py:28-59": "Atomic Commit Python Script",
    "/atomic_commit.py:288-320": "GitConfig Backup and Restore with Rclone",
    "/atomic_commit.py:321-353": "Calculate File Size and MD5 Checksum Function",
    "/atomic_commit.py:354-385": "Check Command's PATH Availability",
    "/atomic_commit.py:386-408": "Windows File Extension Commands",
    "/atomic_commit.py:409-447": "Binary File Checker",
    "/atomic_commit.py:448-479": "Atomic Commit Utilities",
    "/atomic_commit.py:480-508": "Checking Backup Completeness and Rollback",
    "/atomic_commit.py:509-532": "Backing Up Incremental Files",
    "/atomic_commit.py:533-552": "File Check and Integrity Verification",
    "/atomic_commit.py:553-571": "Atomic File Installation",
    "/atomic_commit.py:572-603": "Atomic Commit Script Installation and Configuration",
    "/atomic_commit.py:604-631": "GitIgnore Backup Restoration and Comparison",
    "/atomic_commit.py:61-99": "Atomic File Operations",
    "/atomic_commit.py:632-662": "Cleaning Git Cache with Atomic Commit",
    "/atomic_commit.py:664-696": "Get Latest Commit Hash with Subprocess Command",
    "/atomic_commit.py:697-727": "Git Backup Management Code Snippet",
    "/atomic_commit.py:728-756": "Backup Flag Update and Commit Check",
    "/atomic_commit.py:759-793": "Atomic Backup with File Mtime Check",
    "/atomic_commit.py:794-821": "Backup Decision Algorithm",
    "/atomic_commit.py:822-855": "Atomic Commit Complexity Avoidance",
    "/atomic_commit.py:856-880": "Git Submodule Installation Checker",
    "/atomic_commit.py:881-915": "Managing Atomic Commits in Submodules",
    "/atomic_commit.py:916-943": "Commit Validation Process",
    "/atomic_commit.py:944-982": "Atomic Commit: Finalization Flow",
    "/atomic_commit.py:983-1009": "Atomic Commit in Git Repository",
    "/commit.cmd": "Update and Push Git Repository",
    "/config_utils.py": "DotEnv Parsing and Configuration Manager",
    "/config_utils.py:1-35": "EnvBaseModel: Config and Shell Environment Variable Parser",
    "/config_utils.py:121-152": "DotEnv Class Definition",
    "/config_utils.py:153-186": "Config File Resolver & Preloader",
    "/config_utils.py:187-222": "Levenshtein Distance Threshold Compare",
    "/config_utils.py:223-258": "EnvConfig: Loading and Parsing Environment Variables",
    "/config_utils.py:259-292": "Checking Clashes in Dataclasses",
    "/config_utils.py:293-325": "EnvManager Extensions for Config Utils",
    "/config_utils.py:328-344": "Custom Config Classes and Loading Utilities",
    "/config_utils.py:36-63": "Methods for Model Diffing and Base Class Checking",
    "/config_utils.py:64-82": "Validate Configuration Properties",
    "/config_utils.py:83-120": "Load and Parse DotEnv File with Pydantic Fields",
    "/error_utils.py": "Error Manager: Efficient Exception Handling and Messages",
    "/error_utils.py:1-35": "ErrorManager: Automating Exception Handling",
    "/error_utils.py:37-78": "Error Handler Class",
    "/error_utils.py:79-106": "Comprehensive Error Manager Class",
    "/exception_utils.py": "Exception Manager: Custom Exceptions and Behaviors",
    "/exception_utils.py:1-33": "Exception Manager Class for Automated Error Handling",
    "/exception_utils.py:34-70": "Context-Aware Exception Handling Class",
    "/exception_utils.py:71-88": "Exception Utils: Suppress and Print Errors",
    "/exceptional_print.py": "Exceptional Print Logger",
    "/log_utils.py": "Customizable Rotating Logger with Stream Handlers",
    "/log_utils.py:1-40": "Python Version Check and Log Formatting",
    "/log_utils.py:106-140": "Log File Handler Initialization and Formatting",
    "/log_utils.py:141-177": "Custom Timezone-Aware Log Formatter",
    "/log_utils.py:180-205": "Rotating File Logger Setup",
    "/log_utils.py:206-234": "Log Formatter and Stack Trace Utility",
    "/log_utils.py:236-266": "Custom Exception Handling and Logging Configuration",
    "/log_utils.py:267-288": "Colorful Traceback Logger",
    "/log_utils.py:41-63": "Stack-based Custom Logging",
    "/log_utils.py:65-105": "Logger Utilities Initialization",
    "/requirements.txt": "Python Project Dependencies"
}