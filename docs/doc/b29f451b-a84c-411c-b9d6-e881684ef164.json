{
    "summary": "The code introduces a custom exception handling class, ExceptionManager, for managing multiple exceptions with customizable behavior. It allows adding/removing exceptions and provides methods for printing errors, suppressing exceptions, formatting error messages, and handling iterators.",
    "details": [
        {
            "comment": "The code defines a class called ExceptionManager to handle exceptions and errors. It can be used in `with` statements for automation, and its behavior can be customized with the suppress_error and suppress_exception arguments. The class stores any encountered errors in a list and provides methods to check if there are any errors or exceptions present.",
            "location": "\"/media/root/Toshiba XG3/works/git_atomic_commit/docs/src/exception_utils.py\":0-32",
            "content": "from log_utils import logger_print\n# from beartype import beartype\nfrom typing import Union\n# @beartype\n# TODO: support custom exception/error handlers/formatters\nclass ExceptionManager:\n    def __init__(\n        self,\n        suppress_error: bool = False,\n        suppress_exception: bool = False,\n        default_error: Union[str, None] = None,\n    ):\n        \"\"\"\n        Manage exceptions and errors.\n        Can be used in `with` statements to automate management, which behavior can be configured by setting `suppress_error` and `suppress_exception` arguments.\n        Args:\n            suppress_error:bool: If suppressed, don't treat manual appended error messages as exception\n            suppress_exception:bool: If suppressed, don't suppress exception raised by program\n        \"\"\"\n        self.errors = []\n        self.suppress_error = suppress_error\n        self.suppress_exception = suppress_exception\n        self.default_error = default_error\n    def __bool__(self):\n        return len(self.errors) > 0\n    def has_exception(self):"
        },
        {
            "comment": "This code defines a custom exception handling class that allows you to handle and manage multiple exceptions within one context. The class has methods like append, clear, format_error, raise_if_any, print_if_any, __enter__, and __exit__ which allow you to add/remove exceptions, format them for printing or raising, and handle the exceptions in a context-aware manner.",
            "location": "\"/media/root/Toshiba XG3/works/git_atomic_commit/docs/src/exception_utils.py\":33-69",
            "content": "        return bool(self)\n    def append(self, error: str):\n        if not isinstance(error, str):\n            raise Exception(\"Expected error to be a string.\\nPassed: \" + error)\n        self.errors.append(error)\n    def clear(self):\n        self.errors = []\n        self.default_error = None\n    def format_error(self, clear=True, join: str = \"\\n\"):\n        msgs = self.errors + (\n            [self.default_error] if (self and (self.default_error is not None)) else []\n        )\n        error_msg = join.join(msgs)\n        if clear:\n            self.clear()\n        return error_msg\n    def raise_if_any(self):\n        if self.errors:\n            raise Exception(self.format_error())\n    def print_if_any(self):\n        if self.errors:\n            logger_print(self.format_error())\n            return True\n        return False\n    def __enter__(self):\n        self.raise_if_any()\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if exc_type is None and not self.suppress_error:\n            self.raise_if_any()"
        },
        {
            "comment": "This code initializes an exception manager with suppress_error set to True, and provides methods for printing errors if any, returning the result of suppressing exceptions, formatting error messages, handling iterators, and defining string and length representation.",
            "location": "\"/media/root/Toshiba XG3/works/git_atomic_commit/docs/src/exception_utils.py\":70-87",
            "content": "        else:\n            self.print_if_any()\n        return True if self.suppress_exception else None\n    def __str__(self):\n        return self.format_error(clear=False)\n    def __repr__(self):\n        return self.format_error(clear=False)\n    def __len__(self):\n        return len(self.errors)\n    def __iter__(self):\n        return iter(self.errors)\nexceptionManager = ExceptionManager(suppress_error=True)"
        }
    ]
}